=== Le modèle MVC

Pour concevoir le modèle global de l'application, nous avons utilisé le célèbre 'Pattern MVC'. L'architecture
est ainsi découpée en trois parties principales :

- la link:javadoc\view\View.html['vue'] : gère l'affichage et les composants graphiques,
- le link:javadoc\model\Model.html['modèle'] : effectue les calculs et les traitements sur les données,
- le link:javadoc\main\Controller.html['contrôleur'] : réceptionne les événements et demande à la vue de 
se mettre à jour ou/et au modèle de faire des traitements en conséquence.


=== Notre implémentation du pattern MVC

Outre les éléments décrits dans le paragraphe précédent, notre structure avait besoin de plusieurs composants supplémentaires :

- les link:javadoc\data\package-summary.html['données'] : les classes métiers de l'application, comme +Subject+ ou +Student+,
- des link:javadoc\utils\package-summary.html['outils'] : des classes n'ayant pas de rapport direct avec l'application, mais
que nous utilisons pour faciliter l'implémentation.

TIP: Vous pouvez consulter la javadoc complète du projet ici : link:javadoc\index.html[javadoc].

Nous obtenons au final le diagramme de package suivant :

image::packages.png[]


==== Le Contrôleur : interactions avec l'utilisateur

Le link:javadoc\main\Controller.html['Contrôleur'] gère les interactions avec l'utilisateur. Il implémente l'interface 
+ActionListener+ et récupère tous les les événements lancés par la link:javadoc\view\View.html['Vue']. +
 +
Les différents événements sont identifiés par une chaîne de caractères (l'ActionCommand, plus de détails dans le paragraphe). +
 +
Pour éviter d'avoir à faire des comparaisons de chaînes à chaque fois qu'un événement est reçu, le Contrôleur possède en attribut
une Hashmap associant la valeur d'une ActionCommand à un link:javadoc\utils\function\Function.html['Foncteur']. +
Ce foncteur correspond aux actions à effectuer lors de la réception d'un événement spécifique. +
 +
Les interactions avce l'utilisateur (informations, saisies de valeurs, etc.) se font par le biais de JDialog. 

TIP: Les classes qui étendent 'JDialog' sont définies dans le package link:javadoc\view\dialog\package-summary.html['view.dialog'].


==== Le Modèle : traitements sur les données

Dans notre implémentation, le Modèle n'effectue que très peu de traitements. +
 +
En effet, les traitements dont il est chargé ont été 'groupés' en 'trois catégories' différentes. Chacune de ces
catégories est représentée par un 'sous manager' à qui on délègue les traitements : 

- link:javadoc\model\SubjectManager.html['SubjectManager'] : gère les traitements sur les link:javadoc\data\Subject.html['Sujets'],
- link:javadoc\model\StudentManager.html['StudentManager'] : gère les traitements sur les link:javadoc\data\Student.html['Etudiants'] et
link:javadoc\data\Group.html['Groupes']
- link:javadoc\model\ProjectManager.html['ProjectManager'] : gère les traitements sur les link:javadoc\data\Project.html['Projets'] 
et les link:javadoc\data\Stakeholder.html['Intervenants']. 


==== La Vue : affichage des informations

Expliquer la structuration de la vue, i.e. :

- les différents JPanels,
- MigLayout,
- etc.


=== Interactions entre les composants du MVC

Les interactions entre les composants du MVC peuvent être schématisées par le diagramme suivant :

image::interactions.png[]

Le Contrôleur a pour charge de réceptionner les événements utilisateurs (clic sur un bouton, etc.). Pour 'distinguer
les événements' les uns des autres, une 'ActionCommand' leur est assignée. +
 +
Pour plus de sécurité, les ActionCommand sont définis avec les autres constantes dans l'interface +Constants+. Ces constantes
commencent par +EVT_+ (pour des événements classiques) ou par +MENU_EVT_+ (pour un clic sur un item de la JMenuBar). +
 +
Par exemple : +EVT_ADD_STUDENT+ définit l'ActionCommand d'un événement indiquant que l'utilisateur souhaite
ajouter un nouvel étudiant. +

=== Les classes métiers

Le diagramme UML des classes métiers est le suivant : 

image::classesMetiers.png[width="90%"]

==== Les classes d'association

Les 'classes d'association' n'étant pas directement traduisibles en Java, nous avons décidé de les transcrire en tant que
'tables de hachage' (classe +Hashtable+). +
 +


==== Les Intervenants (classe link:javadoc\data\Stakeholder.html['Stakeholder'])

La classe d'association +Encadrer+ (cf diagramme UML ci-dessus) a été transformée en 